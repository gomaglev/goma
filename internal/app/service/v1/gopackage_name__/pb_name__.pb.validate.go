// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/gopackage_name__/pb_name__.proto

package gopackage_name__

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _pb_name___uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetPbName__Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPbName__Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetPbName__RequestValidationError is the validation error returned by
// GetPbName__Request.Validate if the designated constraints aren't met.
type GetPbName__RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPbName__RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPbName__RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPbName__RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPbName__RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPbName__RequestValidationError) ErrorName() string {
	return "GetPbName__RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPbName__RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPbName__Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPbName__RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPbName__RequestValidationError{}

// Validate checks the field values on GetPbName__Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPbName__Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPbName__()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPbName__ResponseValidationError{
				field:  "PbName__",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPbName__ResponseValidationError is the validation error returned by
// GetPbName__Response.Validate if the designated constraints aren't met.
type GetPbName__ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPbName__ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPbName__ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPbName__ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPbName__ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPbName__ResponseValidationError) ErrorName() string {
	return "GetPbName__ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPbName__ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPbName__Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPbName__ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPbName__ResponseValidationError{}

// Validate checks the field values on ListPbNamePlural__Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPbNamePlural__Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPagination() == nil {
		return ListPbNamePlural__RequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPbNamePlural__RequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListPbNamePlural__RequestValidationError is the validation error returned by
// ListPbNamePlural__Request.Validate if the designated constraints aren't met.
type ListPbNamePlural__RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPbNamePlural__RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPbNamePlural__RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPbNamePlural__RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPbNamePlural__RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPbNamePlural__RequestValidationError) ErrorName() string {
	return "ListPbNamePlural__RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPbNamePlural__RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPbNamePlural__Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPbNamePlural__RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPbNamePlural__RequestValidationError{}

// Validate checks the field values on ListPbNamePlural__Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPbNamePlural__Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPbNamePlural__()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPbNamePlural__ResponseValidationError{
				field:  "PbNamePlural__",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListPbNamePlural__ResponseValidationError is the validation error returned
// by ListPbNamePlural__Response.Validate if the designated constraints aren't met.
type ListPbNamePlural__ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPbNamePlural__ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPbNamePlural__ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPbNamePlural__ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPbNamePlural__ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPbNamePlural__ResponseValidationError) ErrorName() string {
	return "ListPbNamePlural__ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPbNamePlural__ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPbNamePlural__Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPbNamePlural__ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPbNamePlural__ResponseValidationError{}

// Validate checks the field values on CreatPbName__Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatPbName__Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPbName__()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatPbName__RequestValidationError{
				field:  "PbName__",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatPbName__RequestValidationError is the validation error returned by
// CreatPbName__Request.Validate if the designated constraints aren't met.
type CreatPbName__RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatPbName__RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatPbName__RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatPbName__RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatPbName__RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatPbName__RequestValidationError) ErrorName() string {
	return "CreatPbName__RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatPbName__RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatPbName__Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatPbName__RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatPbName__RequestValidationError{}

// Validate checks the field values on CreatPbName__Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatPbName__Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreatPbName__ResponseValidationError is the validation error returned by
// CreatPbName__Response.Validate if the designated constraints aren't met.
type CreatPbName__ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatPbName__ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatPbName__ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatPbName__ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatPbName__ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatPbName__ResponseValidationError) ErrorName() string {
	return "CreatPbName__ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatPbName__ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatPbName__Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatPbName__ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatPbName__ResponseValidationError{}

// Validate checks the field values on UpdatePbName__Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePbName__Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetPbName__()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePbName__RequestValidationError{
				field:  "PbName__",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePbName__RequestValidationError is the validation error returned by
// UpdatePbName__Request.Validate if the designated constraints aren't met.
type UpdatePbName__RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePbName__RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePbName__RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePbName__RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePbName__RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePbName__RequestValidationError) ErrorName() string {
	return "UpdatePbName__RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePbName__RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePbName__Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePbName__RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePbName__RequestValidationError{}

// Validate checks the field values on UpdatePbName__Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePbName__Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Updated

	return nil
}

// UpdatePbName__ResponseValidationError is the validation error returned by
// UpdatePbName__Response.Validate if the designated constraints aren't met.
type UpdatePbName__ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePbName__ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePbName__ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePbName__ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePbName__ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePbName__ResponseValidationError) ErrorName() string {
	return "UpdatePbName__ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePbName__ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePbName__Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePbName__ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePbName__ResponseValidationError{}

// Validate checks the field values on DeletePbName__Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePbName__Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeletePbName__RequestValidationError is the validation error returned by
// DeletePbName__Request.Validate if the designated constraints aren't met.
type DeletePbName__RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePbName__RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePbName__RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePbName__RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePbName__RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePbName__RequestValidationError) ErrorName() string {
	return "DeletePbName__RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePbName__RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePbName__Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePbName__RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePbName__RequestValidationError{}

// Validate checks the field values on DeletePbName__Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePbName__Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Deleted

	return nil
}

// DeletePbName__ResponseValidationError is the validation error returned by
// DeletePbName__Response.Validate if the designated constraints aren't met.
type DeletePbName__ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePbName__ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePbName__ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePbName__ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePbName__ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePbName__ResponseValidationError) ErrorName() string {
	return "DeletePbName__ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePbName__ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePbName__Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePbName__ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePbName__ResponseValidationError{}
