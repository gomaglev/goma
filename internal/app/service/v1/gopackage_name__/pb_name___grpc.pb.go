// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gopackage_name__

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PbName__ServiceClient is the client API for PbName__Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PbName__ServiceClient interface {
	// Get pb_name__
	Get(ctx context.Context, in *GetPbName__Request, opts ...grpc.CallOption) (*GetPbName__Response, error)
	// List pb_name_plural__
	List(ctx context.Context, in *ListPbNamePlural__Request, opts ...grpc.CallOption) (*ListPbNamePlural__Response, error)
	// Create pb_name__
	Create(ctx context.Context, in *CreatPbName__Request, opts ...grpc.CallOption) (*CreatPbName__Response, error)
	// Update pb_name__
	Update(ctx context.Context, in *UpdatePbName__Request, opts ...grpc.CallOption) (*UpdatePbName__Response, error)
	// Delete pb_name__
	Delete(ctx context.Context, in *DeletePbName__Request, opts ...grpc.CallOption) (*DeletePbName__Response, error)
}

type pbName__ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPbName__ServiceClient(cc grpc.ClientConnInterface) PbName__ServiceClient {
	return &pbName__ServiceClient{cc}
}

func (c *pbName__ServiceClient) Get(ctx context.Context, in *GetPbName__Request, opts ...grpc.CallOption) (*GetPbName__Response, error) {
	out := new(GetPbName__Response)
	err := c.cc.Invoke(ctx, "/pkg.proto.gopackage_name__.version__.PbName__Service/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbName__ServiceClient) List(ctx context.Context, in *ListPbNamePlural__Request, opts ...grpc.CallOption) (*ListPbNamePlural__Response, error) {
	out := new(ListPbNamePlural__Response)
	err := c.cc.Invoke(ctx, "/pkg.proto.gopackage_name__.version__.PbName__Service/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbName__ServiceClient) Create(ctx context.Context, in *CreatPbName__Request, opts ...grpc.CallOption) (*CreatPbName__Response, error) {
	out := new(CreatPbName__Response)
	err := c.cc.Invoke(ctx, "/pkg.proto.gopackage_name__.version__.PbName__Service/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbName__ServiceClient) Update(ctx context.Context, in *UpdatePbName__Request, opts ...grpc.CallOption) (*UpdatePbName__Response, error) {
	out := new(UpdatePbName__Response)
	err := c.cc.Invoke(ctx, "/pkg.proto.gopackage_name__.version__.PbName__Service/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbName__ServiceClient) Delete(ctx context.Context, in *DeletePbName__Request, opts ...grpc.CallOption) (*DeletePbName__Response, error) {
	out := new(DeletePbName__Response)
	err := c.cc.Invoke(ctx, "/pkg.proto.gopackage_name__.version__.PbName__Service/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PbName__ServiceServer is the server API for PbName__Service service.
// All implementations should embed UnimplementedPbName__ServiceServer
// for forward compatibility
type PbName__ServiceServer interface {
	// Get pb_name__
	Get(context.Context, *GetPbName__Request) (*GetPbName__Response, error)
	// List pb_name_plural__
	List(context.Context, *ListPbNamePlural__Request) (*ListPbNamePlural__Response, error)
	// Create pb_name__
	Create(context.Context, *CreatPbName__Request) (*CreatPbName__Response, error)
	// Update pb_name__
	Update(context.Context, *UpdatePbName__Request) (*UpdatePbName__Response, error)
	// Delete pb_name__
	Delete(context.Context, *DeletePbName__Request) (*DeletePbName__Response, error)
}

// UnimplementedPbName__ServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPbName__ServiceServer struct {
}

func (UnimplementedPbName__ServiceServer) Get(context.Context, *GetPbName__Request) (*GetPbName__Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPbName__ServiceServer) List(context.Context, *ListPbNamePlural__Request) (*ListPbNamePlural__Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPbName__ServiceServer) Create(context.Context, *CreatPbName__Request) (*CreatPbName__Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPbName__ServiceServer) Update(context.Context, *UpdatePbName__Request) (*UpdatePbName__Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPbName__ServiceServer) Delete(context.Context, *DeletePbName__Request) (*DeletePbName__Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafePbName__ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PbName__ServiceServer will
// result in compilation errors.
type UnsafePbName__ServiceServer interface {
	mustEmbedUnimplementedPbName__ServiceServer()
}

func RegisterPbName__ServiceServer(s *grpc.Server, srv PbName__ServiceServer) {
	s.RegisterService(&_PbName__Service_serviceDesc, srv)
}

func _PbName__Service_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPbName__Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbName__ServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.proto.gopackage_name__.version__.PbName__Service/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbName__ServiceServer).Get(ctx, req.(*GetPbName__Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PbName__Service_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPbNamePlural__Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbName__ServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.proto.gopackage_name__.version__.PbName__Service/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbName__ServiceServer).List(ctx, req.(*ListPbNamePlural__Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PbName__Service_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatPbName__Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbName__ServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.proto.gopackage_name__.version__.PbName__Service/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbName__ServiceServer).Create(ctx, req.(*CreatPbName__Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PbName__Service_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePbName__Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbName__ServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.proto.gopackage_name__.version__.PbName__Service/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbName__ServiceServer).Update(ctx, req.(*UpdatePbName__Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PbName__Service_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePbName__Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbName__ServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.proto.gopackage_name__.version__.PbName__Service/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbName__ServiceServer).Delete(ctx, req.(*DeletePbName__Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _PbName__Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.proto.gopackage_name__.version__.PbName__Service",
	HandlerType: (*PbName__ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PbName__Service_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PbName__Service_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PbName__Service_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PbName__Service_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PbName__Service_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/gopackage_name__/pb_name__.proto",
}
